
<head>
    <title>Dashboard</title>
    <link href="~/Styles/DashboardStyle.css" rel="stylesheet" />
    <script>
        setTimeout(MakeVisible, 500);
        function MakeVisible() {
            document.getElementById("Everything").style.visibility = "visible";
        }
    </script>
</head>

<div id="content" class="container grid">
    <div id="ActionBar">
        <div class="row">
            <button type="button" id="sidebarCollapse" class="navbar-btn">
                <span></span>
                <span></span>
                <span></span>
            </button>
        </div>
    </div>

    @*Content*@
    <div class="container">
        <h2>Your Statistics</h2>
    </div>
    <div class="row container" id="DashboardStats">
        @*Countries visited percent chart*@
        <div class="col-3">
            <div id="CountriesVisitedChart">
                <label class="control-label">Countries Visited</label>
                <div id="bar"></div>
            </div>
        </div>

        @*Trips over time graph*@
        <div class="col-5">
            <div id="TripsOverTime">
                <label class="control-label">Places This Year</label>
                <div class="wrapperForCentering">
                    <canvas id="lineChart" height="180" width="400"></canvas>
                </div>
            </div>
        </div>

        @*Categories of trip chart*@
        <div class="col-4">
            <div id="CategoriesChart">
                <label class="control-label">Categories</label>
                <div class="wrapperForCentering">
                    <canvas id="doughnutChart"></canvas>
                </div>
            </div>
        </div>

    </div>
    <div class="row container">
        @*Main body containing all leaderboards*@
        <div class="col-12">
            <h2>Leaderboards </h2>
            <div class="row">

                @*Most locations leaderboard*@
                <div class="col-4">
                    <div id="MostPinsLeaderboard" class="card">
                        <div class="card-header">Most Locations</div>
                        <div id="MostPinsLeaderboardBody" class="card-body">
                            @*will be dynamically filled from script below*@
                        </div>
                    </div>
                </div>

                @*Most countries leaderboard*@
                <div class="col-4">
                    <div id="MostCountriesLeaderboard" class="card">
                        <div class="card-header">Most Countries</div>
                        <div id="MostCountriesLeaderboardBody" class="card-body">
                            @*will be dynamically filled from script below*@
                        </div>
                    </div>
                </div>

                @*Most Locations visited this month*@
                <div class="col-4">
                    <div id="MostLocationsMonthLeaderboard" class="card">
                        <div class="card-header">Most Locations This Month</div>
                        <div id="MostLocationsThisMonthLeaderboardBody" class="card-body">
                            @*will be dynamically filled from script below*@
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
<script>
    function StartUpFunc() {
        const num_countries_in_world = 195;

        //Set up countries visited bar
        var bar = new RadialProgress(document.getElementById("bar"), { colorFg: "#0080FF", thick: 10, fixedTextSize: 0.25, colorText: "#000000" });
        bar.setIndeterminate(false);

        //Call service to get country count for user
        $.ajax({
            url: '@Url.Action("GetCountryCount", "Dashboard")',
            type: 'POST',
            data: { },
            success: function (data) {
                bar.setValue(data / num_countries_in_world);
            }
        });

        NumberOfLocaionsLeaderboard(); //populate location number leaderboard
        NumberOfCountriesLeaderboard(); //populate country number leaderboard
        NumberOfLocationsThisMonthLeaderboard(); //populate location this month leaderboard
        TripsOverTimeGraph(); //populate trip over time graph
        CategoryChart(); //populate category doughnut chart
    }
    window.onload = StartUpFunc;

    //stuff for circular progress bar
    window.rp_requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || (function (callback, element) { setTimeout(callback, 1000 / 60); });
    function RadialProgress(container, cfg) {
        container.innerHTML = "";
        var nc = document.createElement("div");
        nc.style.width = "10em"; nc.style.height = "10em";
        nc.style.position = "relative";
        container.appendChild(nc);
        container = nc;
        if (!cfg) cfg = {};
        this.colorBg = cfg.colorBg == undefined ? "#404040" : cfg.colorBg;
        this.colorFg = cfg.colorFg == undefined ? "#007FFF" : cfg.colorFg;
        this.colorText = cfg.colorText == undefined ? "#FFFFFF" : cfg.colorText;
        this.indeterminate = cfg.indeterminate == undefined ? false : cfg.indeterminate;
        this.round = cfg.round == undefined ? false : cfg.round;
        this.thick = cfg.thick == undefined ? 2 : cfg.thick;
        this.progress = cfg.progress == undefined ? 0 : cfg.progress;
        this.noAnimations = cfg.noAnimations == undefined ? 0 : cfg.noAnimations;
        this.fixedTextSize = cfg.fixedTextSize == undefined ? false : cfg.fixedTextSize;
        this.animationSpeed = cfg.animationSpeed == undefined ? 1 : cfg.animationSpeed > 0 ? cfg.animationSpeed : 1;
        this.noPercentage = cfg.noPercentage == undefined ? false : cfg.noPercentage;
        this.spin = cfg.spin == undefined ? false : cfg.spin;
        if (cfg.noInitAnimation) this.aniP = this.progress; else this.aniP = 0;
        var c = document.createElement("canvas");
        c.style.position = "absolute"; c.style.top = "0"; c.style.left = "0"; c.style.width = "100%"; c.style.height = "100%"; c.className = "rp_canvas";
        container.appendChild(c);
        this.canvas = c;
        var tcc = document.createElement("div");
        tcc.style.position = "absolute"; tcc.style.display = "table"; tcc.style.width = "100%"; tcc.style.height = "100%";
        var tc = document.createElement("div");
        tc.style.display = "table-cell"; tc.style.verticalAlign = "middle";
        var t = document.createElement("div");
        t.style.color = this.colorText; t.style.textAlign = "center"; t.style.overflow = "visible"; t.style.whiteSpace = "nowrap"; t.className = "rp_text";
        tc.appendChild(t);
        tcc.appendChild(tc);
        container.appendChild(tcc);
        this.text = t;
        this.prevW = 0; this.prevH = 0; this.prevP = 0; this.indetA = 0; this.indetB = 0.2; this.rot = 0;
        this.draw = function (f) {
            if (!(f == true)) rp_requestAnimationFrame(this.draw);
            var c = this.canvas;
            var dp = window.devicePixelRatio || 1;
            c.width = c.clientWidth * dp; c.height = c.clientHeight * dp;
            if (!(f == true) && !this.spin && !this.indeterminate && (Math.abs(this.prevP - this.progress) < 1 && this.prevW == c.width && this.prevH == c.height)) return;
            var centerX = c.width / 2, centerY = c.height / 2, bw = (c.clientWidth / 100.0), radius = c.height / 2 - (this.thick * bw * dp) / 2, bw = (c.clientWidth / 100.0);
            this.text.style.fontSize = (this.fixedTextSize ? (c.clientWidth * this.fixedTextSize) : (c.clientWidth * 0.26 - this.thick)) + "px";
            if (this.noAnimations) this.aniP = this.progress; else { var aniF = Math.pow(0.93, this.animationSpeed); this.aniP = this.aniP * aniF + this.progress * (1 - aniF); }
            c = c.getContext("2d");
            c.beginPath();
            c.strokeStyle = this.colorBg;
            c.lineWidth = this.thick * bw * dp;
            c.arc(centerX, centerY, radius, -Math.PI / 2, 2 * Math.PI);
            c.stroke();
            c.beginPath();
            c.strokeStyle = this.colorFg;
            c.lineWidth = this.thick * bw * dp;
            if (this.round) c.lineCap = "round";
            if (this.indeterminate) {
                this.indetA = (this.indetA + 0.07 * this.animationSpeed) % (2 * Math.PI); this.indetB = (this.indetB + 0.14 * this.animationSpeed) % (2 * Math.PI);
                c.arc(centerX, centerY, radius, this.indetA, this.indetB);
                if (!this.noPercentage) this.text.innerHTML = "";
            } else {
                if (this.spin && !this.noAnimations) this.rot = (this.rot + 0.07 * this.animationSpeed) % (2 * Math.PI)
                c.arc(centerX, centerY, radius, this.rot - Math.PI / 2, this.rot + this.aniP * (2 * Math.PI) - Math.PI / 2);
                if (!this.noPercentage) this.text.innerHTML = Math.round(100 * this.aniP) + " %";
            }
            c.stroke();
            this.prevW = c.width; this.prevH = c.height; this.prevP = this.aniP;
        }.bind(this);
        this.draw();
    }
    RadialProgress.prototype = {
        constructor: RadialProgress,
        setValue: function (p) { this.progress = p < 0 ? 0 : p > 1 ? 1 : p; },
        setIndeterminate: function (i) { this.indeterminate = i; },
        setText: function (t) { this.text.innerHTML = t; }
    }


    //Call service to get pin leaderboard info and populate it
    function NumberOfLocaionsLeaderboard() {
         $.ajax({
            url: '@Url.Action("GetMostPinsLeaderboard", "Dashboard")',
            type: 'POST',
            data: { },
             success: function (data) {
                 var content = "<ul>";
                 for (var i = 0; i < 5 && i < data.length; i++) {
                         content += "<li>" + data[i] + "</li>";
                 }
                 content += "</ul>";
                 document.getElementById("MostPinsLeaderboardBody").innerHTML = content;
            }
        });
    }

    function NumberOfCountriesLeaderboard() {
                 $.ajax({
            url: '@Url.Action("GetMostCountriesLeaderboard", "Dashboard")',
            type: 'POST',
            data: { },
             success: function (data) {
                 var content = "<ul>";
                 for (var i = 0; i < 5 && i < data.length; i++) {
                         content += "<li>" + data[i] + "</li>";
                 }
                 content += "</ul>";
                 document.getElementById("MostCountriesLeaderboardBody").innerHTML = content;
            }
        });
    }

    function NumberOfLocationsThisMonthLeaderboard() {
        $.ajax({
            url: '@Url.Action("GetUsersWithMostLocationsThisMonth", "Dashboard")',
            type: 'POST',
            data: { },
             success: function (data) {
                 var content = "<ul>";
                 for (var i = 0; i < 5 && i < data.length; i++) {
                    content += "<li>" + data[i] + "</li>";
                 }
                 content += "</ul>";
                 document.getElementById("MostLocationsThisMonthLeaderboardBody").innerHTML = content;
            }
        });
    }


    //Get data and populate trips over time chart
    function TripsOverTimeGraph() {
        //get data
        var months = [];
        var monthCount = {
            "January": 0, "February": 0, "March": 0, "April": 0,
            "May": 0, "June": 0, "July": 0, "August": 0, "September": 0, "October": 0,
            "November": 0, "December": 0};
        $.ajax({
            url: '@Url.Action("GetDatesOfTrips", "Dashboard")',
            type: 'POST',
            data: { },
            success: function (data) {
                for (var i = 0; i < data.length; i++) {
                    var arr = data[i].split("-");
                    months.push(arr[1]);
                }
                for (var i = 0; i < months.length; i++) {
                    if (months[i] == 1) {
                        monthCount["January"]++;
                    }
                    else if (months[i] == 2) {
                        monthCount["February"]++;
                    }
                    else if (months[i] == 3) {
                        monthCount["March"]++;
                    }
                    else if (months[i] == 4) {
                        monthCount["April"]++;
                    }
                    else if (months[i] == 5) {
                        monthCount["May"]++;
                    }
                    else if (months[i] == 6) {
                        monthCount["June"]++;
                    }
                    else if (months[i] == 7) {
                        monthCount["July"]++;
                    }
                    else if (months[i] == 8) {
                        monthCount["August"]++;
                    }
                    else if (months[i] == 9) {
                        monthCount["September"]++;
                    }
                    else if (months[i] == 10) {
                        monthCount["October"]++;
                    }
                    else if (months[i] == 11) {
                        monthCount["November"]++;
                    }
                    else if (months[i] == 12) {
                        monthCount["December"]++;
                    }
                }

                //alert(monthCount["January"]);
                var ctxL = document.getElementById("lineChart").getContext('2d');
                var myLineChart = new Chart(ctxL, {
                    type: 'line',
                    data: {
                        labels: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                        datasets: [{
                            label: "Places per month",
                            data: [monthCount["January"], monthCount["February"], monthCount["March"],
                            monthCount["April"], monthCount["May"], monthCount["June"],
                            monthCount["July"], monthCount["August"], monthCount["September"],
                            monthCount["October"], monthCount["November"], monthCount["December"]],
                            backgroundColor: [
                                '#b3d9ff',
                            ],
                            borderColor: [
                                '#0080FF',
                            ],
                            borderWidth: 2
                        }]
                    },
                    options: {
                        responsive: false
                    }
                });
            }
        });
    }


    //category chart func
    function CategoryChart() {
         $.ajax({
            url: '@Url.Action("GetCategoryCount", "Dashboard")',
            type: 'POST',
            data: { },
             success: function (data) {
                 var CatObj = JSON.parse(JSON.stringify(data));
                 var Values = [0, 0, 0, 0];
                 for (var i = 0; i < data.length; i++) {
                     if (CatObj[i].key === "Visited") {
                         Values[0] = CatObj[i].value;
                     }
                     else if (CatObj[i].key === "Want to go") {
                         Values[1] = CatObj[i].value;
                     }
                     else if (CatObj[i].key === "Plan to go") {
                         Values[2] = CatObj[i].value;
                     }
                     else if (CatObj[i].key === "Lived") {
                         Values[3] = CatObj[i].value;
                     }
                 }
                 //alert(Values);

                 //Set up for categories doughnut chart
                 var ctxD = document.getElementById("doughnutChart").getContext('2d');
                 var myLineChart = new Chart(ctxD, {
                     type: 'doughnut',
                     data: {
                         labels: ["Visited", "Want to go", "Plan to go", "Lived"],
                         datasets: [{
                             data: [Values[0], Values[1], Values[2], Values[3]],
                             backgroundColor: ["#0080FF", "#404040", "#99d6ff", "#949FB1"],
                             hoverBackgroundColor: ["#66b3ff", "#808080", "#b3e0ff", "#A8B3C5"]
                         }]
                     },
                     options: {
                         responsive: true
                     }
                 });
            }
        });
    }

    //function DashboardLoaded() {
    //    document.getElementById("Everything").style.visibility = "visible";
    //}

</script>


<script type="text/javascript" src="~/MDB/js/mdb.min.js"></script>
<script src="~/Scripts/MapPageScript.js"></script>
